(()=>{"use strict";var t={816:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},987:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},899:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},561:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},474:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},101:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},334:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},865:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},935:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},517:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},43:(t,e,n)=>{n.d(e,{Z:()=>r});var a=n(537),i=n.n(a),s=n(645),o=n.n(s)()(i());o.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const r=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",a=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),a&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),a&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,a,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(a)for(var r=0;r<this.length;r++){var c=this[r][0];null!=c&&(o[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);a&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(i," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,a=0;a<e.length;a++)if(e[a].identifier===t){n=a;break}return n}function a(t,a){for(var s={},o=[],r=0;r<t.length;r++){var c=t[r],l=a.base?c[0]+a.base:c[0],d=s[l]||0,u="".concat(l," ").concat(d);s[l]=d+1;var h=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var v=i(p,a);a.byIndex=r,e.splice(r,0,{identifier:u,updater:v,references:1})}o.push(u)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var s=a(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var r=n(s[o]);e[r].references--}for(var c=a(t,i),l=0;l<s.length;l++){var d=n(s[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}s=c}}},569:t=>{var e={};t.exports=function(t,n){var a=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,i&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(a,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(a){var i=e[a];if(void 0!==i)return i.exports;var s=e[a]={id:a,exports:{}};return t[a](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var a in e)n.o(e,a)&&!n.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var a={};(()=>{n.d(a,{q$:()=>pt,nh:()=>vt,ue:()=>yt,gF:()=>ft,SQ:()=>mt,uW:()=>gt,o0:()=>ut,ET:()=>ht});var t=n(379),e=n.n(t),i=n(795),s=n.n(i),o=n(569),r=n.n(o),c=n(565),l=n.n(c),d=n(216),u=n.n(d),h=n(589),p=n.n(h),v=n(43),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=r().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=u(),e()(v.Z,f),v.Z&&v.Z.locals&&v.Z.locals;var m=n(561),g={};g.styleTagTransform=p(),g.setAttributes=l(),g.insert=r().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=u(),e()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var y=n(816),b={};b.styleTagTransform=p(),b.setAttributes=l(),b.insert=r().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=u(),e()(y.Z,b),y.Z&&y.Z.locals&&y.Z.locals;var w=n(101),_={};_.styleTagTransform=p(),_.setAttributes=l(),_.insert=r().bind(null,"head"),_.domAPI=s(),_.insertStyleElement=u(),e()(w.Z,_),w.Z&&w.Z.locals&&w.Z.locals;var L=n(334),N={};N.styleTagTransform=p(),N.setAttributes=l(),N.insert=r().bind(null,"head"),N.domAPI=s(),N.insertStyleElement=u(),e()(L.Z,N),L.Z&&L.Z.locals&&L.Z.locals;const P=class{render(t){const e=document.createElement("p");return e.classList.add("page-block__content"),e.innerHTML=`Page #${t}`,e}};var x=n(987),E={};E.styleTagTransform=p(),E.setAttributes=l(),E.insert=r().bind(null,"head"),E.domAPI=s(),E.insertStyleElement=u(),e()(x.Z,E),x.Z&&x.Z.locals&&x.Z.locals;const S=t=>`\n\t\t<svg version="1.0" xmlns="http://www.w3.org/2000/svg"\n\t\twidth="10rem" height="6.1rem" viewBox="0 0 1280.000000 720.000000"\n\t\tpreserveAspectRatio="xMidYMid meet">\n\t\t<metadata>\n\t\tCreated by potrace 1.15, written by Peter Selinger 2001-2017\n\t\t</metadata>\n\t\t<g transform="translate(0.000000,720.000000) scale(0.100000,-0.100000)"\n\t\tfill="${t}" stroke="none">\n\t\t<path d="M5775 5093 c-16 -8 -37 -22 -46 -29 -12 -11 -21 -11 -47 -2 -27 11\n\t\t-35 10 -59 -8 -36 -25 -100 -152 -115 -226 -11 -54 -11 -59 11 -81 12 -14 37\n\t\t-33 56 -43 25 -13 33 -24 33 -44 -2 -59 19 -78 218 -195 l156 -92 -36 -22\n\t\tc-131 -81 -100 -239 62 -313 34 -16 89 -31 122 -35 33 -3 60 -9 60 -14 0 -16\n\t\t-128 -18 -1166 -23 l-1060 -6 -32 45 c-37 53 -39 61 -12 70 71 23 102 245 55\n\t\t403 -17 58 -105 196 -134 211 -11 6 -49 11 -84 11 -49 0 -70 -5 -90 -20 -41\n\t\t-32 -94 -149 -102 -223 -7 -61 4 -161 20 -201 8 -17 5 -18 -41 -12 -88 13 -85\n\t\t5 -54 109 53 179 110 491 93 508 -6 6 -38 13 -72 16 l-61 6 0 38 c0 37 -1 38\n\t\t-46 45 -73 11 -122 0 -160 -37 -42 -40 -65 -96 -109 -256 -52 -190 -90 -322\n\t\t-95 -327 -3 -2 -84 -12 -180 -20 -96 -9 -218 -23 -270 -32 -98 -15 -480 -97\n\t\t-539 -116 -24 -7 -39 -7 -55 1 -18 10 -63 5 -241 -28 -644 -118 -1096 -181\n\t\t-1305 -181 -76 0 -141 -4 -144 -8 -2 -4 2 -46 11 -92 12 -72 13 -114 3 -270\n\t\t-6 -102 -15 -223 -21 -269 l-10 -85 -105 -160 -105 -160 6 -80 c25 -312 51\n\t\t-456 111 -611 61 -156 61 -161 25 -215 -17 -24 -27 -48 -22 -53 23 -23 257\n\t\t-57 556 -82 278 -23 373 -19 383 17 4 15 14 18 71 17 115 -2 118 -4 155 -94\n\t\t218 -529 819 -780 1350 -564 217 88 420 275 525 482 l34 67 52 0 c96 0 145\n\t\t-11 145 -31 0 -18 41 -19 1433 -19 787 0 2042 3 2788 7 1309 6 1356 7 1351 25\n\t\t-4 17 4 18 124 18 l129 -1 45 -71 c84 -133 226 -266 370 -346 273 -153 631\n\t\t-167 925 -37 78 35 206 120 277 184 65 59 167 190 204 262 l24 49 140 0 c136\n\t\t0 140 -1 140 -21 l0 -21 518 4 c391 3 522 7 540 16 17 10 22 22 22 52 0 21 -4\n\t\t41 -10 45 -5 3 -39 8 -75 12 -73 7 -74 8 -53 87 11 41 15 45 49 51 20 4 45 13\n\t\t56 20 16 12 13 14 -34 21 l-52 7 5 61 c8 87 7 86 61 86 69 0 176 19 191 34 25\n\t\t24 35 183 28 441 -7 265 -15 356 -41 445 -32 107 -206 245 -438 347 -682 301\n\t\t-2088 506 -3914 573 -266 10 -273 10 -309 35 -50 34 -123 55 -214 62 -69 5\n\t\t-84 10 -185 68 -469 266 -1334 683 -1575 760 -30 9 -60 23 -66 31 -14 17 -77\n\t\t44 -101 44 -10 -1 -31 -8 -48 -17z m-3825 -3229 c13 -13 13 -16 0 -24 -21 -14\n\t\t-81 -30 -111 -30 -42 0 -115 29 -140 57 l-24 25 130 -7 c91 -5 134 -11 145\n\t\t-21z m858 -35 c56 0 63 -2 42 -10 -30 -13 -119 -4 -134 12 -8 9 -6 10 7 5 10\n\t\t-3 49 -6 85 -7z m7250 -19 c77 -24 202 -26 282 -5 66 17 72 11 67 -61 -5 -71\n\t\t-45 -136 -105 -171 -39 -23 -59 -28 -112 -28 -89 1 -157 41 -196 118 -21 40\n\t\t-29 119 -15 145 7 12 13 22 14 22 1 0 31 -9 65 -20z m-7890 -80 c77 -24 216\n\t\t-27 287 -5 27 8 52 12 57 9 4 -3 8 -24 8 -46 0 -131 -94 -228 -223 -228 -122\n\t\t0 -229 125 -211 248 3 23 9 42 13 42 3 0 35 -9 69 -20z"/>\n\t\t</g>\n\t\t</svg>\n\t`;var k=n(899),O={};O.styleTagTransform=p(),O.setAttributes=l(),O.insert=r().bind(null,"head"),O.domAPI=s(),O.insertStyleElement=u(),e()(k.Z,O),k.Z&&k.Z.locals&&k.Z.locals;var T=n(865),A={};A.styleTagTransform=p(),A.setAttributes=l(),A.insert=r().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=u(),e()(T.Z,A),T.Z&&T.Z.locals&&T.Z.locals;const B=class{render(){const t=document.createElement("div");return t.classList.add("page-buttons__container"),t.innerHTML='\n\t\t\t<button class="button button-prev disable">Prev</button>\n\t\t\t<button class="button button-next">Next</button>\n\t\t',t}},$=t=>{localStorage.setItem("page",`${t}`)},W=t=>t.length?`?${t.map((t=>`${t.key}=${t.value}`)).join("&")}`:"";const C=(t,e)=>{return n=void 0,a=void 0,s=function*(){e&&(t[0].value=e);const n=yield fetch(`${ut}${ht.garage}${W(t)}`);return{items:yield n.json(),countOfCars:Number(yield n.headers.get("X-Total-Count"))}},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s};const M=t=>{return e=void 0,n=void 0,i=function*(){let e=t[1].value,n=yield C(t);return Math.ceil(n.countOfCars/e)},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i};const Z=(t,e)=>{return n=void 0,a=void 0,s=function*(){e&&(t[0].value=e);const n=yield fetch(`${ut}${ht.winners}${W(t)}`);return{items:yield n.json(),countOfWinners:Number(yield n.headers.get("X-Total-Count"))}},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s};const j=t=>{return e=void 0,n=void 0,i=function*(){let e=t[1].value,n=yield Z(t);return Math.ceil(n.countOfWinners/e)},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i};const H=(t,e)=>{return n=void 0,a=void 0,s=function*(){const n=e.querySelector(".button-next"),a=e.querySelector(".button-prev");let i;if(e.classList.contains("garage")?i=localStorage.getItem("page"):e.classList.contains("winners")&&(i=localStorage.getItem("pageWinners")),i&&""!==i){let s;e.classList.contains("garage")?s=yield M(t):e.classList.contains("winners")&&(s=yield j(t)),s&&Number(i)>=s&&1!==Number(i)&&(null==a||a.classList.remove("disable"),null==n||n.classList.add("disable")),s&&Number(i)>1&&Number(i)<s&&(null==n||n.classList.remove("disable"),null==a||a.classList.remove("disable")),Number(i)===s&&1===Number(i)&&(null==n||n.classList.add("disable"),null==a||a.classList.add("disable"))}else null==n||n.classList.add("disable"),null==a||a.classList.add("disable")},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s};const I=t=>{return e=void 0,n=void 0,i=function*(){let e=localStorage.getItem("page");if(e&&""!==e){let n=yield M(t);return Number(e)>=n?n:Number(e)}return 1},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i},R=t=>t[Math.floor(Math.random()*t.length)],q=t=>{t.classList.toggle("disable")};const J=t=>{return e=void 0,n=void 0,i=function*(){const e=yield fetch(`${ut}${ht.garage}/${t}`);return yield e.json()},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i};const V=(t,e)=>{return n=void 0,a=void 0,s=function*(){let n=e/1e3;console.log("timeCarAnimateSeconds: ",n);let a=localStorage.getItem("arrayOfWinnersAnimation");if(a){let u=JSON.parse(a);if(0===u.length){console.log("WINNER: ",`car: ${t}, time: ${n}`),u.push({id:t,time:e}),localStorage.setItem("arrayOfWinnersAnimation",JSON.stringify(u));let a=yield J(t);const h=document.querySelector(".garage__winnerBlock");h&&(h.classList.remove("disable"),h.innerHTML=`\n\t\t\t\t<p>WINNERS: </p>\n\t\t\t\t<div>Car: <span class="winnerBlock__name">${a.name}</span>, Time: <span class="winnerBlock__time">${n} seconds</span></div>\n\t\t\t`);let p=(yield Z(vt)).items;if(null==p?void 0:p.length){let e=p.filter((e=>e.id===t));if(e.length){let a=e[0].wins;a+=1;let c=e[0].time;n<c&&(c=n),yield(l=t,d={wins:a,time:c},i=void 0,s=void 0,o=void 0,r=function*(){const t=yield fetch(`${ut}${ht.winners}/${l}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(d)});return yield t.json()},new(o||(o=Promise))((function(t,e){function n(t){try{c(r.next(t))}catch(t){e(t)}}function a(t){try{c(r.throw(t))}catch(t){e(t)}}function c(e){var i;e.done?t(e.value):(i=e.value,i instanceof o?i:new o((function(t){t(i)}))).then(n,a)}c((r=r.apply(i,s||[])).next())})))}else yield(c={id:t,wins:1,time:n},function(t,e,n,a){return new(n||(n=Promise))((function(i,s){function o(t){try{c(a.next(t))}catch(t){s(t)}}function r(t){try{c(a.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,r)}c((a=a.apply(t,e||[])).next())}))}(void 0,void 0,void 0,(function*(){const t=yield fetch(`${ut}${ht.winners}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)});yield t.json()})))}const v=document.querySelector(".button-reset");null==v||v.classList.remove("disable");const f=document.querySelector(".button-race");null==f||f.classList.add("disable")}}var i,s,o,r,c,l,d},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s};const F=(t,e)=>{return n=void 0,a=void 0,s=function*(){q(t);const n=t.nextElementSibling;q(n);const a=t.getAttribute("data-car-start"),i=yield(t=>{return e=void 0,n=void 0,i=function*(){const e=yield fetch(`${ut}${ht.engine}?id=${t}&status=started`,{method:"PATCH"});return yield e.json()},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i})(Number(a)),s=(c=i,Math.round(c.distance/c.velocity)),o=(t=>{const e=t.closest(".car-item");if(e){const t=e.querySelector(".car-road__way");let n=null==t?void 0:t.offsetWidth;if(n)return n-150}})(t),r=document.getElementById(`car-image-${a}`);var c;r&&o&&(((t,e,n,a,i,s)=>{let o=e.offsetLeft;const r=a/(60*n/1e3);let c;const l=i=>{return d=void 0,u=void 0,p=function*(){var i;o+=r,e.style.transform=`translateX(${o}px)`,o<a?(c=window.requestAnimationFrame(l),i=t,yt.filter((t=>t.idCar===i)).length?(((t,e,n)=>{for(let a=0;a<e.length;a++)e[a].idCar===t&&(e[a].idRAF=n)})(t,yt,c),localStorage.setItem("arrOfAnimationLocal",JSON.stringify(yt))):(((t,e,n)=>{e.push({idCar:t,idRAF:n})})(t,yt,c),localStorage.setItem("arrOfAnimationLocal",JSON.stringify(yt)))):s&&(yield V(t,n))},new((h=void 0)||(h=Promise))((function(t,e){function n(t){try{i(p.next(t))}catch(t){e(t)}}function a(t){try{i(p.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof h?i:new h((function(t){t(i)}))).then(n,a)}i((p=p.apply(d,u||[])).next())}));var d,u,h,p};l()})(Number(a),r,s,o,0,e),yield(t=>{return e=void 0,n=void 0,i=function*(){try{const e=yield fetch(`${ut}${ht.engine}?id=${t}&status=drive`,{method:"PATCH"});if(console.log("response.status: ",e.status),500===e.status)throw new Error}catch(e){let n=localStorage.getItem("arrOfAnimationLocal");if(n){let e=JSON.parse(n).filter((e=>e.idCar===Number(t)))[0].idRAF;window.cancelAnimationFrame(e)}}},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i})(Number(a)))},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s};const D=t=>{return e=void 0,n=void 0,i=function*(){q(t);const e=t.previousElementSibling;q(e);const n=t.getAttribute("data-car-stop"),a=(yield(t=>{return e=void 0,n=void 0,i=function*(){const e=yield fetch(`${ut}${ht.engine}?id=${t}&status=stopped`,{method:"PATCH"});return yield e.json()},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i})(Number(n)),document.getElementById(`car-image-${n}`));a&&(a.style.transform="translateX(0px)")},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i},U=(t,e)=>{const n=t.value.trim(),a=null==e?void 0:e.value;return console.log("colorValue: ",a),{name:n,color:a}};const z=t=>{return e=void 0,n=void 0,i=function*(){const e=yield fetch(`${ut}${ht.garage}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});yield e.json()},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i};var X=function(t,e,n,a){return new(n||(n=Promise))((function(i,s){function o(t){try{c(a.next(t))}catch(t){s(t)}}function r(t){try{c(a.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,r)}c((a=a.apply(t,e||[])).next())}))};const G=class{constructor(t){this.container=document.createElement("div"),this.container.classList.add("garage"),this.container.id=t,this.totalCars={},this.maxPageValue=1,this.page=1,this.carsOnPage={},this.baseControlsNode=document.createElement("div"),this.baseControlsNode.classList.add("garage__base-controls"),this.nameBlockNode=document.createElement("div"),this.nameBlockNode.classList.add("garage__name-block"),this.carListNode=document.createElement("div"),this.carListNode.classList.add("garage__car-list"),this.pageBlockNode=document.createElement("div"),this.pageBlockNode.classList.add("garage__page-block"),this.pageButtonsNode=document.createElement("div"),this.pageButtonsNode.classList.add("garage__page-buttons"),this.baseControlsObj=new class{render(){const t=document.createElement("div");return t.classList.add("base-controls__container"),t.innerHTML='\n\t\t<div class="base-controls__create-car">\n\t\t\t<input class="input input-text_create" type="text" id="input-create_name" name="input-create_name">\n\t\t\t<input class="input-color input-color_create" type="color" id="input-create_color" name="nput-create_color" value="#4fc4ff">\n\t\t\t<button class="button button-create">Create</button>\n\t\t</div>\n\n\t\t<div class="base-controls__update-car disable">\n\t\t\t<input class="input input-text_update" type="text" id="input-update_name" name="input-update_name">\n\t\t\t<input class="input-color input-color_update" type="color" id="input-update_color" name="input-update_color" value="#4fc4ff">\n\t\t\t<button class="button button-update">Update</button>\n\t\t</div>\n\n\t\t<div class="base-controls__general-settings">\n\t\t\t<button class="button button-race">Race</button>\n\t\t\t<button class="button button-reset disable">Reset</button>\n\t\t\t<button class="button button-generate">Generate cars</button>\n\t\t</div>\n\t\t',t}},this.nameBlockObj=new class{render(t){const e=document.createElement("div");return e.classList.add("name-block__container"),e.innerHTML=`\n\t\t\t<div class="name-block__name">Garage</div>\n\t\t\t<div class="name-block__count">(<span class="name-block__count-value">${t.countOfCars}</span>)</div>\n\t\t`,e}},this.pageBlockObj=new P,this.cartListObj=new class{render(t){var e;const n=document.createElement("div");return n.classList.add("car-list__container"),null===(e=t.items)||void 0===e||e.forEach((t=>{let e=(new class{render(t){const e=document.createElement("div");return e.classList.add("car-item"),e.setAttribute("data-car-id",`${t.id}`),e.innerHTML=`\n\t\t\t<div class="car-item__controls">\n\t\t\t\t<div class="car-item__buttons">\n\t\t\t\t\t<button class="button button-select" data-car-select="${t.id}">Select</button>\n\t\t\t\t\t<button class="button button-remove" data-car-remove="${t.id}">Remove</button>\n\t\t\t\t</div>\n\t\t\t\t<p class="car-item__name">${t.name}</p>\n\t\t\t</div>\n\t\t\t<div class="car-road">\n\t\t\t\t<div class="car-road__buttons">\n\t\t\t\t\t<button class="button button-start" data-car-start="${t.id}">A</button>\n\t\t\t\t\t<button class="button button-stop disable" data-car-stop="${t.id}">B</button>\n\t\t\t\t</div>\n\t\t\t\t<div id="car-road-${t.id}" class="car-road__way">\n\t\t\t\t\t<div id="car-image-${t.id}" class="car-road__image">${S(t.color)}</div>\n\t\t\t\t\t<div class="car-road__flag"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,e}}).render(t);n.append(e)})),n}},this.pageButtonsObj=new B}createContentPage(){return X(this,void 0,void 0,(function*(){localStorage.removeItem("arrOfAnimationLocal");let t=document.createElement("div");t.classList.add("garage__container"),this.totalCars=yield C(pt),this.maxPageValue=yield M(pt),this.page=yield I(pt),this.carsOnPage=yield C(pt,this.page),this.baseControlsNode.append(this.baseControlsObj.render()),this.nameBlockNode.append(this.nameBlockObj.render(this.totalCars)),this.pageBlockNode.append(this.pageBlockObj.render(this.page)),this.carListNode.append(yield this.cartListObj.render(this.carsOnPage)),this.pageButtonsNode.append(this.pageButtonsObj.render()),t.append(this.baseControlsNode),t.append(this.nameBlockNode),t.append(this.pageBlockNode),t.append(yield this.carListNode),t.append(this.pageButtonsNode);let e=document.createElement("div");return e.classList.add("garage__winnerBlock"),e.classList.add("disable"),t.append(e),t}))}handleEvents(){const t=this.container.querySelector(".garage__container");t&&t.addEventListener("click",(e=>X(this,void 0,void 0,(function*(){if(e.target instanceof HTMLElement&&e.target.classList.contains("button-create")){const e=t.querySelector(".input-text_create"),n=t.querySelector(".input-color_create");if(e&&n&&""!==e.value.trim()){const t=U(e,n);yield z(t),e.value="",$(this.page),this.updateAll()}}if(e.target instanceof HTMLElement&&e.target.classList.contains("button-next")&&this.page<this.maxPageValue&&(this.page+=1,$(this.page),this.updateAll()),e.target instanceof HTMLElement&&e.target.classList.contains("button-prev")){let t=this.page;t>1&&t<=this.maxPageValue&&(this.page-=1,$(this.page),this.updateAll())}if(e.target instanceof HTMLElement&&e.target.classList.contains("button-remove")){let t=e.target.getAttribute("data-car-remove");yield(t=>{return e=void 0,n=void 0,i=function*(){const e=yield fetch(`${ut}${ht.garage}/${t}`,{method:"DELETE"});return yield e.json()},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i})(Number(t)),yield(t=>{return e=void 0,n=void 0,i=function*(){var e;let n=yield Z(vt);console.log("totalWinners: ",n);let a=null===(e=n.items)||void 0===e?void 0:e.filter((e=>e.id===t));if(console.log("filteredArrayOfTotalWinners: ",a),null==a?void 0:a.length){const e=yield fetch(`${ut}${ht.winners}/${t}`,{method:"DELETE"});return yield e.json()}},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i})(Number(t)),$(this.page),this.updateAll(),H(pt,this.container)}if(e.target instanceof HTMLElement&&e.target.classList.contains("button-select")){const a=t.querySelector(".base-controls__create-car"),i=t.querySelector(".base-controls__update-car");null==a||a.classList.add("disable"),null==i||i.classList.remove("disable");let s=e.target.getAttribute("data-car-select");n=Number(s),localStorage.setItem("idSelectedCar",`${n}`),$(this.page),this.updateAll()}var n;if(e.target instanceof HTMLElement&&e.target.classList.contains("button-update")){const e=t.querySelector(".input-text_update"),n=t.querySelector(".input-color_update");let a=(()=>{let t=localStorage.getItem("idSelectedCar");if(t)return Number(t)})();if(e&&n&&""!==e.value.trim()){const i=U(e,n);a&&(yield((t,e)=>{return n=void 0,a=void 0,s=function*(){const n=yield fetch(`${ut}${ht.garage}/${t}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return yield n.json()},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s})(a,i)),e.value="",$(this.page),this.updateAll();const s=t.querySelector(".base-controls__create-car"),o=t.querySelector(".base-controls__update-car");null==s||s.classList.remove("disable"),null==o||o.classList.add("disable")}}if(e.target instanceof HTMLElement&&e.target.classList.contains("button-generate")){const t=(()=>{let t=[];for(let e=0;e<100;e++)t.push({name:`${R(ft)} - ${R(mt)}`,color:(()=>{let t="#";for(let e=0;e<6;e++)t+=R(gt);return t})()});return t})();100===t.length&&t.forEach((t=>X(this,void 0,void 0,(function*(){return yield z(t)})))),$(this.page),yield this.updateAll()}if(e.target instanceof HTMLElement&&e.target.classList.contains("button-start")&&(yield F(e.target)),e.target instanceof HTMLElement&&e.target.classList.contains("button-stop")&&(yield D(e.target),localStorage.setItem("arrOfAnimationLocal",JSON.stringify([]))),e.target instanceof HTMLElement&&e.target.classList.contains("button-race")){q(e.target);const n=t.querySelectorAll(".button-start");let a=[];for(let t=0;t<n.length;t++){let e=new Promise(((e,a)=>{e(F(n[t],"race"))}));a.push(e)}yield Promise.all(a)}if(e.target instanceof HTMLElement&&e.target.classList.contains("button-reset")){q(e.target);const n=t.querySelectorAll(".button-stop");n&&n.forEach((t=>q(t)));const a=t.querySelector(".button-race");a&&q(a),yield this.updateAll();const i=document.querySelector(".garage__winnerBlock");null==i||i.classList.add("disable");let s=[];localStorage.setItem("arrayOfWinnersAnimation",JSON.stringify(s)),yield this.updateAll()}}))))}updateAll(){return X(this,void 0,void 0,(function*(){this.totalCars=yield C(pt),this.maxPageValue=yield M(pt),this.page=yield I(pt),$(this.page),this.carsOnPage=yield C(pt,this.page),this.updateCountCarsOnPage(),this.updateCarList(),this.updateNumbOfPage(),this.updatePageButtons()}))}updateCountCarsOnPage(){this.nameBlockNode.innerHTML="",this.nameBlockNode.append(this.nameBlockObj.render(this.totalCars))}updateCarList(){this.carListNode.innerHTML="",this.carListNode.append(this.cartListObj.render(this.carsOnPage))}updateNumbOfPage(){this.pageBlockNode.innerHTML="",this.pageBlockNode.append(this.pageBlockObj.render(this.page))}updatePageButtons(){this.pageButtonsNode.innerHTML="",this.pageButtonsNode.append(this.pageButtonsObj.render()),H(pt,this.container)}render(){return X(this,void 0,void 0,(function*(){const t=yield this.createContentPage();return this.container.append(t),$(this.page),H(pt,this.container),this.handleEvents(),this.container}))}};var K=n(474),Q={};Q.styleTagTransform=p(),Q.setAttributes=l(),Q.insert=r().bind(null,"head"),Q.domAPI=s(),Q.insertStyleElement=u(),e()(K.Z,Q),K.Z&&K.Z.locals&&K.Z.locals;var Y=n(935),tt={};tt.styleTagTransform=p(),tt.setAttributes=l(),tt.insert=r().bind(null,"head"),tt.domAPI=s(),tt.insertStyleElement=u(),e()(Y.Z,tt),Y.Z&&Y.Z.locals&&Y.Z.locals;var et=n(517),nt={};nt.styleTagTransform=p(),nt.setAttributes=l(),nt.insert=r().bind(null,"head"),nt.domAPI=s(),nt.insertStyleElement=u(),e()(et.Z,nt),et.Z&&et.Z.locals&&et.Z.locals;var at=function(t,e,n,a){return new(n||(n=Promise))((function(i,s){function o(t){try{c(a.next(t))}catch(t){s(t)}}function r(t){try{c(a.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,r)}c((a=a.apply(t,e||[])).next())}))};const it=t=>{return e=void 0,n=void 0,i=function*(){let e=localStorage.getItem("pageWinners");if(e&&""!==e){let n=yield j(t);return Number(e)>=n?n:Number(e)}return 1},new((a=void 0)||(a=Promise))((function(t,s){function o(t){try{c(i.next(t))}catch(t){s(t)}}function r(t){try{c(i.throw(t))}catch(t){s(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(t){t(n)}))).then(o,r)}c((i=i.apply(e,n||[])).next())}));var e,n,a,i},st=t=>{localStorage.setItem("pageWinners",`${t}`),console.log("занесен pageWin в локал")};var ot=function(t,e,n,a){return new(n||(n=Promise))((function(i,s){function o(t){try{c(a.next(t))}catch(t){s(t)}}function r(t){try{c(a.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,r)}c((a=a.apply(t,e||[])).next())}))};function rt(t){return{hashPage:t.slice(1)}}var ct=function(t,e,n,a){return new(n||(n=Promise))((function(i,s){function o(t){try{c(a.next(t))}catch(t){s(t)}}function r(t){try{c(a.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,r)}c((a=a.apply(t,e||[])).next())}))};class lt{constructor(){this.enableRouteChange=()=>{window.addEventListener("hashchange",(()=>ct(this,void 0,void 0,(function*(){yield this.handleURLParams()}))))},this.container=document.body,this.wrap=document.createElement("div"),this.wrap.classList.add("wrap"),this.container.append(this.wrap),this.header=new class{constructor(){this.headerNode=document.createElement("header"),this.headerNode.classList.add("header")}render(){const t=document.createElement("div");return t.classList.add("header__container"),t.innerHTML='\n\t\t\t<nav class="header__navigation">\n\t\t\t\t<ul class="navigation">\n\t\t\t\t\t<li class="navigation__item">\n\t\t\t\t\t\t<a href="#garage" class="navigation-link garage-link navigation-link_activ">Garage</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class="navigation__item">\n\t\t\t\t\t\t<a href="#winners" class="navigation-link winners-link">Winners</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t\t<h1 class="header__title">Play - RACE</h1>\n\t\t',this.headerNode.append(t),this.headerNode}setActiveButton(t){const e=this.headerNode.querySelector(".garage-link"),n=this.headerNode.querySelector(".winners-link");"garage"===t&&(null==e||e.classList.add("navigation-link_activ"),null==n||n.classList.remove("navigation-link_activ")),"winners"===t&&(null==e||e.classList.remove("navigation-link_activ"),null==n||n.classList.add("navigation-link_activ"))}},this.initialPage=new G("garage-page")}renderNewPage({hashPage:t}){return ct(this,void 0,void 0,(function*(){const e=document.querySelector(`#${lt.defaultPageID}`);if(e){e.innerHTML="";let n=null;if(""===t?n=new G("garage-page"):t.includes("garage")?(n=new G("garage-page"),this.header.setActiveButton("garage")):t.includes("winners")&&(n=new class{constructor(t){this.container=document.createElement("div"),this.container.classList.add("winners"),this.container.id=t,this.totalWinners={},this.maxPageWinnersValue=1,this.pageWinners=1,this.winnersOnPage={},this.nameBlockWinnersNode=document.createElement("div"),this.nameBlockWinnersNode.classList.add("winners__name-block"),this.winnersListNode=document.createElement("div"),this.winnersListNode.classList.add("winners__winners-list"),this.pageBlockWinnersNode=document.createElement("div"),this.pageBlockWinnersNode.classList.add("winners__page-block"),this.pageButtonsNode=document.createElement("div"),this.pageButtonsNode.classList.add("winners__page-buttons"),this.nameBlockWinnersObj=new class{render(t){const e=document.createElement("div");return e.classList.add("name-block-winners__container"),e.innerHTML=`\n\t\t\t<div class="name-block-winners__name">Winners</div>\n\t\t\t<div class="name-block-winners__count">(<span class="name-block-winners__count-value">${t.countOfWinners}</span>)</div>\n\t\t`,e}},this.pageBlockObj=new P,this.winnersListObj=new class{render(t){var e;return at(this,void 0,void 0,(function*(){const n=document.createElement("div");n.classList.add("winners-list__container");const a=document.createElement("div");a.classList.add("winners-list__titles");const i=document.createElement("div");return i.classList.add("winners-list__content"),a.innerHTML='\n\t\t\t<div class="winners-titles__number">№</div>\n\t\t\t<div class="winners-titles__car">Car</div>\n\t\t\t<div class="winners-titles__name">Name</div>\n\t\t\t<div class="winners-titles__wins">Wins</div>\n\t\t\t<div class="winners-titles__time">Best time (seconds)</div>\n\t\t',n.append(a),n.append(i),null===(e=t.items)||void 0===e||e.forEach(((t,e)=>at(this,void 0,void 0,(function*(){let n=yield(new class{render(t,e){return n=this,a=void 0,s=function*(){const n=yield J(Number(t.id));console.log("garageCar: ",n.id),console.log("winnerItem: ",t);const a=document.createElement("div");return a.classList.add("winner-item"),a.setAttribute("data-winner-id",`${t.id}`),a.innerHTML=`\n\t\t\t<div class="winner-item__number">${e+1}</div>\n\t\t\t<div class="winner-item__car">${S(n.color)}</div>\n\t\t\t<div class="winner-item__name">${n.name}</div>\n\t\t\t<div class="winner-item__wins">${t.wins}</div>\n\t\t\t<div class="winner-item__time">${t.time}</div>\n\t\t`,a},new((i=void 0)||(i=Promise))((function(t,e){function o(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(o,r)}c((s=s.apply(n,a||[])).next())}));var n,a,i,s}}).render(t,e);i.append(n)})))),n}))}},this.pageButtonsObj=new B}createContentPage(){return ot(this,void 0,void 0,(function*(){localStorage.setItem("arrayOfWinnersAnimation",JSON.stringify([]));let t=document.createElement("div");return t.classList.add("winners__container"),this.totalWinners=yield Z(vt),this.maxPageWinnersValue=yield j(vt),this.pageWinners=yield it(vt),this.winnersOnPage=yield Z(vt,this.pageWinners),this.nameBlockWinnersNode.append(this.nameBlockWinnersObj.render(this.totalWinners)),this.pageBlockWinnersNode.append(this.pageBlockObj.render(this.pageWinners)),this.winnersListNode.append(yield this.winnersListObj.render(this.winnersOnPage)),this.pageButtonsNode.append(this.pageButtonsObj.render()),t.append(this.nameBlockWinnersNode),t.append(this.pageBlockWinnersNode),t.append(this.winnersListNode),t.append(this.pageButtonsNode),t}))}handleEvents(){const t=this.container.querySelector(".winners__container");t&&t.addEventListener("click",(t=>ot(this,void 0,void 0,(function*(){if(t.target instanceof HTMLElement&&t.target.classList.contains("button-next")&&this.pageWinners<this.maxPageWinnersValue&&(this.pageWinners+=1,st(this.pageWinners),this.updateAll()),t.target instanceof HTMLElement&&t.target.classList.contains("button-prev")){let t=this.pageWinners;t>1&&t<=this.maxPageWinnersValue&&(this.pageWinners-=1,st(this.pageWinners),this.updateAll())}}))))}updateAll(){return ot(this,void 0,void 0,(function*(){this.totalWinners=yield Z(vt),this.maxPageWinnersValue=yield j(vt),this.pageWinners=yield it(vt),st(this.pageWinners),this.winnersOnPage=yield Z(vt,this.pageWinners),this.updateCountWinnersOnPage(),this.updateWinnersList(),this.updateNumbOfPageWinners(),this.updatePageButtons()}))}updateCountWinnersOnPage(){this.nameBlockWinnersNode.innerHTML="",this.nameBlockWinnersNode.append(this.nameBlockWinnersObj.render(this.totalWinners))}updateWinnersList(){return ot(this,void 0,void 0,(function*(){this.winnersListNode.innerHTML="",this.winnersListNode.append(yield this.winnersListObj.render(this.winnersOnPage))}))}updateNumbOfPageWinners(){this.pageBlockWinnersNode.innerHTML="",this.pageBlockWinnersNode.append(this.pageBlockObj.render(this.pageWinners))}updatePageButtons(){this.pageButtonsNode.innerHTML="",this.pageButtonsNode.append(this.pageButtonsObj.render()),H(vt,this.container)}render(){return ot(this,void 0,void 0,(function*(){const t=yield this.createContentPage();return this.container.append(t),st(this.pageWinners),H(vt,this.container),this.handleEvents(),this.container}))}}("winners-page"),this.header.setActiveButton("winners")),n){const t=yield n.render();e.append(t)}}}))}handleURLParams(){return ct(this,void 0,void 0,(function*(){let t=rt(window.location.hash);yield this.renderNewPage(t)}))}checkLocation(){return ct(this,void 0,void 0,(function*(){const t=yield this.initialPage.render();t.id=lt.defaultPageID,this.wrap.append(t);let e=rt(window.location.hash);e.hashPage&&(yield this.renderNewPage(e))}))}handleEventOnApp(){this.container.addEventListener("click",(t=>{t.target instanceof HTMLElement&&t.target.classList.contains("garage-link")&&this.header.setActiveButton("garage"),t.target instanceof HTMLElement&&t.target.classList.contains("winners-link")&&this.header.setActiveButton("winners")}))}run(){addEventListener("DOMContentLoaded",(()=>ct(this,void 0,void 0,(function*(){this.wrap.append(this.header.render()),yield this.checkLocation(),yield this.enableRouteChange()}))),!0)}}lt.defaultPageID="current-page";const dt=lt;window.localStorage.clear(),localStorage.setItem("arrayOfWinnersAnimation",JSON.stringify([]));const ut="http://127.0.0.1:3000",ht={garage:"/garage",winners:"/winners",engine:"/engine"},pt=[{key:"_page",value:1},{key:"_limit",value:7}],vt=[{key:"_page",value:1},{key:"_limit",value:10}],ft=["Audi","BMW","Ford","Honda","Hyundai","Kia","Lada","Mazda","Mercedes-Benz","Mitsubishi","Nissan","Renault","Skoda","Toyota","Volkswagen"],mt=["Sedan","Universal","Liftback","Hatchback","Crossover"],gt="0123456789ABCDEF".split("");let yt=[];(new dt).run()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,